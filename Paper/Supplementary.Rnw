\documentclass{article}
\usepackage{booktabs}
\usepackage{array}
%\usepackage[T1]{fontenc}
\usepackage[margin=1in]{geometry}
\usepackage[english]{babel}
\usepackage{amsmath}

\usepackage{hyperref}
%\usepackage[numbers]{natbib}
%\addbibresource{biblio.bib}

\date{}


\begin{document}


<<setup, include=FALSE, cache=FALSE, echo=FALSE>>=
opts_chunk$set(fig.path='figures/plots-', fig.align='center', fig.show='hold', eval=TRUE, echo=TRUE)
options(replace.assign=TRUE,width=80)
Sys.setenv(TEXINPUTS=getwd(),
           BIBINPUTS=getwd(),
           BSTINPUTS=getwd())

@

\title{ \huge{\textbf{Addressing Outcome Reporting Bias in Meta-analysis: A Selection Model Perspective}}\\
\large{\textbf{Supplementary Figures and Results}}
}

\author{\textbf{Alessandra Gaia Saracini\textsuperscript{1} and Leonhard Held\textsuperscript{2}}}


\maketitle

\footnotetext[1]{Corresponding author: Alessandra Gaia Saracini, ETH Zurich, Department of Mathematics, alessandragaia.saracini@gmail.com}
\footnotetext[2]{Leonhard Held, Professor, University of Zurich, Epidemiology, Biostatistics and Prevention Institute, leonhard.held@uzh.ch}

In the Results section of the manuscript, we primarily focus on bias in the estimation of the treatment effect $\mu$. The following document contains the results of the additional performance measures considered in the simulation study: mean squared error (MSE), coverage, power, and empirical standard error (ESE).

%%%%%% bias with naive estimation
%Firstly, the results indicate a substantial bias in the estimation of the treatment effect when using naive estimation methods that do not account for ORB, as observable from Figures \ref{res1} and \ref{res2}. This aligns with existing literature \citep{Copas2019, Bay, dutch} and prior exploratory analysis \citep{mythesis}. As the true treatment effect size increases, the bias diminishes, reflecting the reduced likelihood of unreported studies, given the higher change of statistically significant results for large treatment effect sizes. Study size variations ($K=5,15,30$) do not significantly affect the bias, while heterogeneity has a substantial impact. High heterogeneity settings, particularly with $I^2=90$, exhibit larger biases, reinforcing findings from previous exploratory work \citep{mythesis}. Incorporating heterogeneity effects into the ORB framework is thus important and offers novel insights compared to past investigations \citep{Copas2019}. The observed patterns of naive estimation are consistent across both ORB simulation processes, regardless of the DGM parameter $\gamma$ value, whether $\gamma=1.5$ (which results in mostly non-significant unreported studies) or $\gamma=0.5$ (where some significant unreported studies, with larger p-values, exist).

%%%% bias reduction with DGM and other selection functions
%%%% NB for k=5 not good
%When applying the ORB-adjustment framework using selection functions, there is a difference to be noted depending on the study size. For $K=15, 30$, the bias is eliminated when the selection function matches the ORB DGM, confirming the model's effectiveness when correctly specified. Different selection functions ($w_A, w_B, w_C, w_D$) show varying degrees of bias reduction. For the DGM with $\gamma=1.5$, these ORB-adjusted estimates shift the bias towards the null but do not fully eliminate it unless the exact DGM function is used. $w_B$ performs slightly better than $w_A$, and $w_C$ performs the least well, with, however, overall minimal differences noted among the functions, particularly in low heterogeneity settings. In the $\gamma=0.5$ setting, similar patterns are observed, with $w_B$ being the least strict and $w_C$ the most strict. The ORB-adjustment here tends to reduce the treatment effect size excessively, indicating potential overcorrection due to the steep $p$-value dependence. For the small meta-analysis size of $K=5$, we observe that the ORB-adjustment is not very successful; the bias is reduced, but not eliminated, even with the correctly specified model, i.e., using the selection function $w_{DGM}$. We should thus use ORB-adjustment with caution when we have very few studies; we note that, $K=5$ is the total number of studies, both reported and unreported; hence the number of reported studies is even smaller. 

%%%% other measures: naive worst, others adjustments perform similar, worst for K=5
The MSE of the naive estimate of treatment effect is substantially reduced in high heterogeneity settings, for all ORB-adjusted estimates, as can be seen from Figure \ref{MSE1}, for the ORB DGM with $\gamma=1.5$ and Figure \ref{MSE2}, for the ORB DGM with $\gamma=0.5$. Similar to the results of the bias measures, we note better performance of the ORB-adjusted methods for $K=15,30$, with more limited improvements for the small meta-analysis size $K=5$. 

Coverage for the ORB DGM with $\gamma=0.5$ is shown in Figure \ref{Cov2}. As for the $\gamma=1.5$ setting, shown in the main manuscript, coverage can be substantially low with naive estimation. There are no substantial difference between the various selection functions in the ORB-adjusted estimates, including the correct model specification one, and overall the coverage is very high when adjusting for ORB. We observe a dip in the coverage of the ORB-adjusted estimates around $\mu=0.4$, which can be explained by the fact that, for smaller $\mu$, with various unreported study outcomes, we expect higher widths of the CI and thus higher coverage, while for larger $\mu$, there are fewer unreported studies, so overall less bias and thus higher coverage.

%%%% Power and empirical SE
Figures \ref{Pow1} and \ref{Pow2} show the power of the various estimates. We observe that with naive estimation, for both ORB DGM processes $\gamma=1.5$ and $\gamma=0.5$, the power is severely inflated. The power of the naive estimate is particularly high for high heterogeneity settings and for large meta-analysis study sizes. For the $\gamma=1.5$ setting, we observe that the correct DGM selection function results in the lowest power among the various ORB-adjusted estimates, with other ORB-adjusted estimates in-between. For $\gamma=0.5$, the opposite is observed, i.e., $w_{DGM}$ results in highest power, with other ORB-adjusted estimates being lower. This is consistent with the bias findings, as most ORB-adjusted estimates were too conservative in the adjustment, shifting the estimate towards the null, with a thus increased likelihood of obtaining ORB-adjusted results which are not significant.

%%% Empirical SE
The empirical standard error (ESE) performance measure is shown in Figures \ref{SE1} and \ref{SE2}. We first note that the ESE of the naive estimate is overall consistent to the calculations done for the expected SE of $\hat{\mu}$ in the simulation study protocol. In this case, the naive estimate has overall slightly higher SE, given the presence of unreported study outcomes; furthermore, the naive ESE in some settings decreases slightly as $\mu$ increases, given the increasing amount of reported study outcomes. In most settings, there are no substantial differences in the ESE between the various ORB-adjusted estimates and the naive one. Some exceptions which can be noted are that for the small meta-analysis study size setting, i.e., $K=1.5$, and high heterogeneity, e.g., $I^2=90$, the various ORB-adjusted estimates all have a similar ESE, which is lower than the naive one. On the other hand, for the same heterogeneity level but $K=15, 30$, some ORB-adjusted estimates have high ESE than the naive one, in particular for the ORB DGM setting $\gamma=0.5$. This could indicate a possible threshold behavior, wherein adding contributions from a few unreported study outcomes can increase precision of the estimate, as we are using additional information which was not known with naive estimation, but, having many unreported outcomes contributing to the likelihood results in less precision due to uncertainty in the information added. 



%%%%%%%%%%% MSE %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

\begin{figure}[!hbt]
\centering
\caption{MSE in the estimation of the treatment effect for ORB simulated with $\gamma=1.5$}
%\hline
<<echo=FALSE, results='asis', fig.height=12, fig.width=9, message=FALSE, warning=FALSE>>=

#Plots
library(ggplot2)
library(dplyr)
library(gridExtra)

dat.new <- readRDS("../Simulation/AdjustResults3200k_15.rds")

##################### Bias #####################################################

#################### Bias setting 1.5 ##########################################


library(ggplot2)
library(dplyr)
library(gridExtra)

legend_plot_results <- ggplot() +
  geom_line(aes(x = 0, y = 0, color = "pink"))+
  geom_line(aes(x = 0, y = 0, color = "gray"))+
  geom_line(aes(x = 0, y = 0, color = "#619CFF")) +
  geom_line(aes(x = 0, y = 0, color = "#00BA38")) +
  geom_line(aes(x = 0, y = 0, color = "red")) +
  geom_line(aes(x = 0, y = 0, color = "orange")) +
  geom_line(aes(x = 0, y = 0, color = "purple")) +
  
  scale_color_manual(
    values = c(
      "pink",
      "gray",
      "#619CFF", 
      "#00BA38", 
       "red", 
       "orange",
       "purple"
    ),
    labels = c(
      "Naive",
      expression(w[DGM]),
      expression(w[A]),
      expression(w[B](gamma == 3)),
      expression(w[C](beta == 3)),
      expression(w[D](gamma == 7 ~ "," ~ beta == 1.5)),
      expression(w[D](gamma == 1.5 ~ "," ~ beta == 7))
    )
  ) +
  
   
  theme_void() +
  theme(
    legend.text = element_text(size = 8),
    legend.key.size = unit(3, "mm"),
    axis.title.x = element_blank(),
    axis.title.y = element_blank()
  ) +
  guides(color = guide_legend(title = NULL, label.hjust = 0.5))



wrap_plot_mse <- function(data) {
  ggplot(data) +
    geom_line(aes(x = mu_values, y = Unadj_mse), color = "pink", linewidth = 0.6) + #Naive
    geom_point(aes(x = mu_values, y = Unadj_mse), color = "pink", linewidth = 0.6) + #Naive
    
    geom_line(aes(x = mu_values, y = DGM_mse), color = "gray", linewidth = 0.6) + #DGM
    geom_point(aes(x = mu_values, y = DGM_mse), color = "gray", linewidth = 0.6) + #DGM
    
    geom_line(aes(x = mu_values, y = CL_mse), color = "red", linewidth = 0.6) + #w_{C, beta=3}
    geom_point(aes(x = mu_values, y = CL_mse), color = "red", linewidth = 0.6) + #w_{C, beta=3}
    
    geom_line(aes(x = mu_values, y = CC1_mse), color = "orange", linewidth = 0.6) + #w_{D, gamma=7, beta=1.5}
    geom_point(aes(x = mu_values, y = CC1_mse), color = "orange", linewidth = 0.6) + #w_{D, gamma=7, beta=1.5}
    
    geom_line(aes(x = mu_values, y = CC2_mse), color = "purple", linewidth = 0.6) + #w_{D, gamma=1.5, beta=7}
    geom_point(aes(x = mu_values, y = CC2_mse), color = "purple", linewidth = 0.6) + #w_{D, gamma=1.5, beta=7}
    
    geom_line(aes(x = mu_values, y = LL_mse), color = "#619CFF", linewidth = 0.6) + #w_{A}
    geom_point(aes(x = mu_values, y = LL_mse), color = "#619CFF", linewidth = 0.6) + #w_{A}
    
    geom_line(aes(x = mu_values, y = LC_mse), color = "#00BA38", linewidth = 0.6) + #w_{B, gamma=3}
    geom_point(aes(x = mu_values, y = LC_mse), color = "#00BA38", linewidth = 0.6) + #w_{B, gamma=3}
    
    geom_hline(yintercept = 0, color = "black", linetype = "dashed", linewidth = 0.4) +
    labs(
      x = "", 
      y = "", 
      title = bquote("K" == .(data$k_values) ~ "," ~ I^2 == .(round(data$tau_squared_values / (data$tau_squared_values + 2 / 50), 2)))
    ) +
    ylim(0, 0.51) +
    theme_minimal() +
    theme(
      legend.position = "none",
      axis.text = element_text(size = 7),
      axis.title = element_text(size = 7),
      plot.title = element_text(size = 8)
    )
}


# Filter the data for gamma = 1.5
parDATA_15 <- dat.new %>% filter(gamma == 1.5)

# Generate plots
plots_mse <- parDATA_15 %>%
  group_by(tau_squared_values, k_values) %>%
  do(plot = wrap_plot_mse(.)) %>%
  pull(plot)

# Arrange the plots and legend
final_plot <- grid.arrange(
  arrangeGrob(grobs = plots_mse, nrow = 5, ncol = 3),
  legend_plot_results,
  nrow = 1,
  widths = c(4.8, 0.7),
  left = grid::textGrob("MSE", rot = 90, gp = grid::gpar(fontsize = 10)),
  bottom = grid::textGrob(expression(mu), gp = grid::gpar(fontsize = 12))
)

invisible(final_plot)




@
%\hline
\label{MSE1}
\end{figure}


\begin{figure}[!hbt]
\centering
\caption{MSE in the estimation of the treatment effect for ORB simulated with $\gamma=0.5$}
%\hline
<<echo=FALSE, results='asis', fig.height=12, fig.width=9, message=FALSE, warning=FALSE>>=

#Plots
library(ggplot2)
library(dplyr)
library(gridExtra)

dat.new <- readRDS("../Simulation/AdjustResults3200k_05.rds")

#dattt <- readRDS("/Users/alessandrasaracini/Downloads/AdjustResults.rds")

##################### mse #####################################################


# Create a separate plot for the legend
legend_plot_mse <- ggplot() +
  geom_line(aes(x = 0, y = 0, color =  "Naive")) +
  geom_line(aes(x = 0, y = 0, color =  "Adj Constant-Constant")) +
  geom_line(aes(x = 0, y = 0, color =  "Adj Constant-Continuous")) +
  geom_line(aes(x = 0, y = 0, color = "Adj Continuous-Constant"))+
  geom_line(aes(x = 0, y = 0, color = "Adj Continuous-Continuous I"))+
  geom_line(aes(x = 0, y = 0, color = "Adj Continuous-Continuous II"))+
  geom_line(aes(x = 0, y = 0, color = "Adj DGM"))+
  
  theme_void()+
  theme(
    legend.text = element_text(size = 4),
    legend.key.size = unit(2, "mm"), # Adjust the size of plot title
    axis.title.x = element_blank(),             # Remove x-axis label
    axis.title.y = element_blank()
  )+
  guides(color = guide_legend(title = NULL))


#################### mse setting 0.5 ##########################################

library(ggplot2)
library(dplyr)
library(gridExtra)

wrap_plot_mse <- function(data) {
  ggplot(data) +
    geom_line(aes(x = mu_values, y = Unadj_mse), color = "pink", linewidth = 0.6) + #Naive
    geom_point(aes(x = mu_values, y = Unadj_mse), color = "pink", linewidth = 0.6) + #Naive
    
    geom_line(aes(x = mu_values, y = DGM_mse), color = "gray", linewidth = 0.6) + #DGM
    geom_point(aes(x = mu_values, y = DGM_mse), color = "gray", linewidth = 0.6) + #DGM
    
    
    geom_line(aes(x = mu_values, y = LL_mse), color = "#619CFF", linewidth = 0.6) + #w_{0}
    geom_point(aes(x = mu_values, y = LL_mse), color = "#619CFF", linewidth = 0.6) + #w_{0}
    #geom_line(aes(x = mu_values, y = LC_mse), color = "#00BA38", linewidth = 0.6) + #w_{1, gamma=3}
    geom_line(aes(x = mu_values, y = CL_mse), color = "red", linewidth = 0.6) + #w_{2, beta=3}
    geom_point(aes(x = mu_values, y = CL_mse), color = "red", linewidth = 0.6) + #w_{2, beta=3}
    
    geom_line(aes(x = mu_values, y = CC1_mse), color = "orange", linewidth = 0.6) + #w_{3, gamma=7, beta=1.5}
    geom_point(aes(x = mu_values, y = CC1_mse), color = "orange", linewidth = 0.6) +
    geom_line(aes(x = mu_values, y = CC2_mse), color = "purple", linewidth = 0.6) + #w_{3, gamma=1.5, beta=7}
    geom_point(aes(x = mu_values, y = CC2_mse), color = "purple", linewidth = 0.6) +
    geom_line(aes(x = mu_values, y = LC_mse), color = "#00BA38", linewidth = 0.6) + #w_{1, gamma=3}
    geom_point(aes(x = mu_values, y = LC_mse), color = "#00BA38", linewidth = 0.6) +
    geom_hline(yintercept = 0, color = "black", linetype = "dashed", linewidth = 0.2) +
    labs(
      x = "", 
      y = "", 
      title = bquote("K" == .(data$k_values) ~ "," ~ I^2 == .(round(data$tau_squared_values / (data$tau_squared_values + 2 / 50), 2)))
    ) +
    ylim(0, 0.51) +
    theme_minimal() +
    theme(
      legend.position = "none",
      axis.text = element_text(size = 7),
      axis.title = element_text(size = 7),
      plot.title = element_text(size = 8)
    )
}

# Create a separate plot for the legend
legend_plot_mse <- ggplot() +
  geom_line(aes(x = 0, y = 0, color = "pink")) +
  geom_line(aes(x = 0, y = 0, color = "gray")) +
  geom_line(aes(x = 0, y = 0, color = "#619CFF")) +
  geom_line(aes(x = 0, y = 0, color = "#00BA38")) +
  geom_line(aes(x = 0, y = 0, color = "red")) +
  geom_line(aes(x = 0, y = 0, color = "orange")) +
  geom_line(aes(x = 0, y = 0, color = "purple")) +
  
  scale_color_manual(
    values = c(
      "pink", 
      "gray", 
       "#619CFF", 
       "#00BA38",
       "red", 
       "orange", 
      "purple"
    ),
    labels = c(
      expression(Naive),
      expression(w[DGM]),
      expression(w[A]),
      expression(w[B] ~ gamma == 3),
      expression(w[C] ~ beta == 3),
      expression(w[D] ~ gamma == 7 ~ "," ~ beta == 1.5),
      expression(w[D] ~ gamma == 1.5 ~ "," ~ beta == 7)
    )
  ) +
  
   
  theme_void() +
  theme(
    legend.text = element_text(size = 8),
    legend.key.size = unit(3, "mm"),
    axis.title.x = element_blank(),
    axis.title.y = element_blank()
  ) +
  guides(color = guide_legend(title = NULL, label.hjust = 0.5))

parDATA_05 <- dat.new %>% filter(gamma == 0.5)


# Generate plots
plots_mse <- parDATA_05 %>%
  group_by(tau_squared_values, k_values) %>%
  do(plot = wrap_plot_mse(.)) %>%
  pull(plot)

# Arrange the plots and legend
final_plot <- grid.arrange(
  arrangeGrob(grobs = plots_mse, nrow = 5, ncol = 3),
  legend_plot_mse,
  nrow = 1,
  widths = c(4.8, 0.7),
  left = grid::textGrob("MSE", rot=90, gp = grid::gpar(fontsize = 10)), 
             bottom = grid::textGrob(expression(mu), gp = grid::gpar(fontsize = 12)))




invisible(final_plot)

@
%\hline
\label{MSE2}
\end{figure}


%%%%%%%%% Coverage %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%


\begin{figure}[!hbt]
\centering
\caption{Coverage in the estimation of the treatment effect for ORB simulated with $\gamma=0.5$}
%\hline
<<echo=FALSE, results='asis', fig.height=12, fig.width=9, message=FALSE, warning=FALSE>>=

#Plots
library(ggplot2)
library(dplyr)
library(gridExtra)

dat.new <- readRDS("../Simulation/AdjustResults3200k_05.rds")

#dattt <- readRDS("/Users/alessandrasaracini/Downloads/AdjustResults.rds")

##################### cov #####################################################


# Create a separate plot for the legend
legend_plot_cov <- ggplot() +
  geom_line(aes(x = 0, y = 0, color =  "Naive")) +
  geom_line(aes(x = 0, y = 0, color =  "Adj Constant-Constant")) +
  geom_line(aes(x = 0, y = 0, color =  "Adj Constant-Continuous")) +
  geom_line(aes(x = 0, y = 0, color = "Adj Continuous-Constant"))+
  geom_line(aes(x = 0, y = 0, color = "Adj Continuous-Continuous I"))+
  geom_line(aes(x = 0, y = 0, color = "Adj Continuous-Continuous II"))+
  geom_line(aes(x = 0, y = 0, color = "Adj DGM"))+
  
  theme_void()+
  theme(
    legend.text = element_text(size = 4),
    legend.key.size = unit(2, "mm"), # Adjust the size of plot title
    axis.title.x = element_blank(),             # Remove x-axis label
    axis.title.y = element_blank()
  )+
  guides(color = guide_legend(title = NULL))


#################### cov setting 0.5 ##########################################

library(ggplot2)
library(dplyr)
library(gridExtra)

wrap_plot_cov <- function(data) {
  ggplot(data) +
    geom_line(aes(x = mu_values, y = Unadj_cov), color = "pink", linewidth = 0.6) + #Naive
    geom_point(aes(x = mu_values, y = Unadj_cov), color = "pink", linewidth = 0.6) + #Naive
    
    geom_line(aes(x = mu_values, y = DGM_cov), color = "gray", linewidth = 0.6) + #DGM
    geom_point(aes(x = mu_values, y = DGM_cov), color = "gray", linewidth = 0.6) + #DGM
    
    
    geom_line(aes(x = mu_values, y = LL_cov), color = "#619CFF", linewidth = 0.6) + #w_{0}
    geom_point(aes(x = mu_values, y = LL_cov), color = "#619CFF", linewidth = 0.6) + #w_{0}
    #geom_line(aes(x = mu_values, y = LC_cov), color = "#00BA38", linewidth = 0.6) + #w_{1, gamma=3}
    geom_line(aes(x = mu_values, y = CL_cov), color = "red", linewidth = 0.6) + #w_{2, beta=3}
    geom_point(aes(x = mu_values, y = CL_cov), color = "red", linewidth = 0.6) + #w_{2, beta=3}
    
    geom_line(aes(x = mu_values, y = CC1_cov), color = "orange", linewidth = 0.6) + #w_{3, gamma=7, beta=1.5}
    geom_point(aes(x = mu_values, y = CC1_cov), color = "orange", linewidth = 0.6) +
    geom_line(aes(x = mu_values, y = CC2_cov), color = "purple", linewidth = 0.6) + #w_{3, gamma=1.5, beta=7}
    geom_point(aes(x = mu_values, y = CC2_cov), color = "purple", linewidth = 0.6) +
    geom_line(aes(x = mu_values, y = LC_cov), color = "#00BA38", linewidth = 0.6) + #w_{1, gamma=3}
    geom_point(aes(x = mu_values, y = LC_cov), color = "#00BA38", linewidth = 0.6) +
    geom_hline(yintercept = 0, color = "black", linetype = "dashed", linewidth = 0.2) +
    labs(
      x = "", 
      y = "", 
      title = bquote("K" == .(data$k_values) ~ "," ~ I^2 == .(round(data$tau_squared_values / (data$tau_squared_values + 2 / 50), 2)))
    ) +
    ylim(0, 1) +
    theme_minimal() +
    theme(
      legend.position = "none",
      axis.text = element_text(size = 7),
      axis.title = element_text(size = 7),
      plot.title = element_text(size = 8)
    )
}

# Create a separate plot for the legend
legend_plot_cov <- ggplot() +
  geom_line(aes(x = 0, y = 0, color = "pink")) +
  geom_line(aes(x = 0, y = 0, color = "gray")) +
  geom_line(aes(x = 0, y = 0, color = "#619CFF")) +
  geom_line(aes(x = 0, y = 0, color = "#00BA38")) +
  geom_line(aes(x = 0, y = 0, color = "red")) +
  geom_line(aes(x = 0, y = 0, color = "orange")) +
  geom_line(aes(x = 0, y = 0, color = "purple")) +
  
  scale_color_manual(
    values = c(
      "pink", 
      "gray", 
       "#619CFF", 
       "#00BA38",
       "red", 
       "orange", 
      "purple"
    ),
    labels = c(
      expression(Naive),
      expression(w[DGM]),
      expression(w[A]),
      expression(w[B] ~ gamma == 3),
      expression(w[C] ~ beta == 3),
      expression(w[D] ~ gamma == 7 ~ "," ~ beta == 1.5),
      expression(w[D] ~ gamma == 1.5 ~ "," ~ beta == 7)
    )
  ) +
  
   
  theme_void() +
  theme(
    legend.text = element_text(size = 8),
    legend.key.size = unit(3, "mm"),
    axis.title.x = element_blank(),
    axis.title.y = element_blank()
  ) +
  guides(color = guide_legend(title = NULL, label.hjust = 0.5))

parDATA_05 <- dat.new %>% filter(gamma == 0.5)


# Generate plots
plots_cov <- parDATA_05 %>%
  group_by(tau_squared_values, k_values) %>%
  do(plot = wrap_plot_cov(.)) %>%
  pull(plot)

# Arrange the plots and legend
final_plot <- grid.arrange(
  arrangeGrob(grobs = plots_cov, nrow = 5, ncol = 3),
  legend_plot_cov,
  nrow = 1,
  widths = c(4.8, 0.7),
  left = grid::textGrob("Coverage", rot=90, gp = grid::gpar(fontsize = 10)), 
             bottom = grid::textGrob(expression(mu), gp = grid::gpar(fontsize = 12)))




invisible(final_plot)

@
%\hline
\label{Cov2}
\end{figure}

%%%%%%% Power %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

\begin{figure}[!hbt]
\centering
\caption{Power in the estimation of the treatment effect for ORB simulated with $\gamma=1.5$}
%\hline
<<echo=FALSE, results='asis', fig.height=12, fig.width=9, message=FALSE, warning=FALSE>>=

#Plots
library(ggplot2)
library(dplyr)
library(gridExtra)

dat.new <- readRDS("../Simulation/AdjustResults3200k_15.rds")

##################### Bias #####################################################

#################### Bias setting 1.5 ##########################################


library(ggplot2)
library(dplyr)
library(gridExtra)

legend_plot_results <- ggplot() +
  geom_line(aes(x = 0, y = 0, color = "pink"))+
  geom_line(aes(x = 0, y = 0, color = "gray"))+
  geom_line(aes(x = 0, y = 0, color = "#619CFF")) +
  geom_line(aes(x = 0, y = 0, color = "#00BA38")) +
  geom_line(aes(x = 0, y = 0, color = "red")) +
  geom_line(aes(x = 0, y = 0, color = "orange")) +
  geom_line(aes(x = 0, y = 0, color = "purple")) +
  
  scale_color_manual(
    values = c(
      "pink",
      "gray",
      "#619CFF", 
      "#00BA38", 
       "red", 
       "orange",
       "purple"
    ),
    labels = c(
      "Naive",
      expression(w[DGM]),
      expression(w[A]),
      expression(w[B](gamma == 3)),
      expression(w[C](beta == 3)),
      expression(w[D](gamma == 7 ~ "," ~ beta == 1.5)),
      expression(w[D](gamma == 1.5 ~ "," ~ beta == 7))
    )
  ) +
  
   
  theme_void() +
  theme(
    legend.text = element_text(size = 8),
    legend.key.size = unit(3, "mm"),
    axis.title.x = element_blank(),
    axis.title.y = element_blank()
  ) +
  guides(color = guide_legend(title = NULL, label.hjust = 0.5))



wrap_plot_power <- function(data) {
  ggplot(data) +
    geom_line(aes(x = mu_values, y = 1-Unadj_power), color = "pink", linewidth = 0.6) + #Naive
    geom_point(aes(x = mu_values, y = 1-Unadj_power), color = "pink", linewidth = 0.6) + #Naive
    
    geom_line(aes(x = mu_values, y = 1-DGM_power), color = "gray", linewidth = 0.6) + #DGM
    geom_point(aes(x = mu_values, y = 1-DGM_power), color = "gray", linewidth = 0.6) + #DGM
    
    geom_line(aes(x = mu_values, y = 1-CL_power), color = "red", linewidth = 0.6) + #w_{C, beta=3}
    geom_point(aes(x = mu_values, y = 1-CL_power), color = "red", linewidth = 0.6) + #w_{C, beta=3}
    
    geom_line(aes(x = mu_values, y = 1-CC1_power), color = "orange", linewidth = 0.6) + #w_{D, gamma=7, beta=1.5}
    geom_point(aes(x = mu_values, y = 1-CC1_power), color = "orange", linewidth = 0.6) + #w_{D, gamma=7, beta=1.5}
    
    geom_line(aes(x = mu_values, y = 1-CC2_power), color = "purple", linewidth = 0.6) + #w_{D, gamma=1.5, beta=7}
    geom_point(aes(x = mu_values, y = 1-CC2_power), color = "purple", linewidth = 0.6) + #w_{D, gamma=1.5, beta=7}
    
    geom_line(aes(x = mu_values, y = 1-LL_power), color = "#619CFF", linewidth = 0.6) + #w_{A}
    geom_point(aes(x = mu_values, y = 1-LL_power), color = "#619CFF", linewidth = 0.6) + #w_{A}
    
    geom_line(aes(x = mu_values, y = 1-LC_power), color = "#00BA38", linewidth = 0.6) + #w_{B, gamma=3}
    geom_point(aes(x = mu_values, y = 1-LC_power), color = "#00BA38", linewidth = 0.6) + #w_{B, gamma=3}
    
    geom_hline(yintercept = 0, color = "black", linetype = "dashed", linewidth = 0.4) +
    labs(
      x = "", 
      y = "", 
      title = bquote("K" == .(data$k_values) ~ "," ~ I^2 == .(round(data$tau_squared_values / (data$tau_squared_values + 2 / 50), 2)))
    ) +
    ylim(0, 1) +
    theme_minimal() +
    theme(
      legend.position = "none",
      axis.text = element_text(size = 7),
      axis.title = element_text(size = 7),
      plot.title = element_text(size = 8)
    )
}


# Filter the data for gamma = 1.5
parDATA_15 <- dat.new %>% filter(gamma == 1.5)

# Generate plots
plots_power <- parDATA_15 %>%
  group_by(tau_squared_values, k_values) %>%
  do(plot = wrap_plot_power(.)) %>%
  pull(plot)

# Arrange the plots and legend
final_plot <- grid.arrange(
  arrangeGrob(grobs = plots_power, nrow = 5, ncol = 3),
  legend_plot_results,
  nrow = 1,
  widths = c(4.8, 0.7),
  left = grid::textGrob("Power", rot = 90, gp = grid::gpar(fontsize = 10)),
  bottom = grid::textGrob(expression(mu), gp = grid::gpar(fontsize = 12))
)

invisible(final_plot)




@
%\hline
\label{Pow1}
\end{figure}


\begin{figure}[!hbt]
\centering
\caption{Power in the estimation of the treatment effect for ORB simulated with $\gamma=0.5$}
%\hline
<<echo=FALSE, results='asis', fig.height=12, fig.width=9, message=FALSE, warning=FALSE>>=

#Plots
library(ggplot2)
library(dplyr)
library(gridExtra)

dat.new <- readRDS("../Simulation/AdjustResults3200k_05.rds")

#dattt <- readRDS("/Users/alessandrasaracini/Downloads/AdjustResults.rds")

##################### pow #####################################################


# Create a separate plot for the legend
legend_plot_power <- ggplot() +
  geom_line(aes(x = 0, y = 0, color =  "Naive")) +
  geom_line(aes(x = 0, y = 0, color =  "Adj Constant-Constant")) +
  geom_line(aes(x = 0, y = 0, color =  "Adj Constant-Continuous")) +
  geom_line(aes(x = 0, y = 0, color = "Adj Continuous-Constant"))+
  geom_line(aes(x = 0, y = 0, color = "Adj Continuous-Continuous I"))+
  geom_line(aes(x = 0, y = 0, color = "Adj Continuous-Continuous II"))+
  geom_line(aes(x = 0, y = 0, color = "Adj DGM"))+
  
  theme_void()+
  theme(
    legend.text = element_text(size = 4),
    legend.key.size = unit(2, "mm"), # Adjust the size of plot title
    axis.title.x = element_blank(),             # Remove x-axis label
    axis.title.y = element_blank()
  )+
  guides(color = guide_legend(title = NULL))


#################### pow setting 0.5 ##########################################

library(ggplot2)
library(dplyr)
library(gridExtra)

wrap_plot_power <- function(data) {
  ggplot(data) +
    geom_line(aes(x = mu_values, y = 1-Unadj_power), color = "pink", linewidth = 0.6) + #Naive
    geom_point(aes(x = mu_values, y = 1-Unadj_power), color = "pink", linewidth = 0.6) + #Naive
    
    geom_line(aes(x = mu_values, y = 1-DGM_power), color = "gray", linewidth = 0.6) + #DGM
    geom_point(aes(x = mu_values, y = 1-DGM_power), color = "gray", linewidth = 0.6) + #DGM
    
    
    geom_line(aes(x = mu_values, y = 1-LL_power), color = "#619CFF", linewidth = 0.6) + #w_{0}
    geom_point(aes(x = mu_values, y = 1-LL_power), color = "#619CFF", linewidth = 0.6) + #w_{0}
    #geom_line(aes(x = mu_values, y = 1-LC_power), color = "#00BA38", linewidth = 0.6) + #w_{1, gamma=3}
    geom_line(aes(x = mu_values, y = 1-CL_power), color = "red", linewidth = 0.6) + #w_{2, beta=3}
    geom_point(aes(x = mu_values, y = 1-CL_power), color = "red", linewidth = 0.6) + #w_{2, beta=3}
    
    geom_line(aes(x = mu_values, y = 1-CC1_power), color = "orange", linewidth = 0.6) + #w_{3, gamma=7, beta=1.5}
    geom_point(aes(x = mu_values, y = 1-CC1_power), color = "orange", linewidth = 0.6) +
    geom_line(aes(x = mu_values, y = 1-CC2_power), color = "purple", linewidth = 0.6) + #w_{3, gamma=1.5, beta=7}
    geom_point(aes(x = mu_values, y = 1-CC2_power), color = "purple", linewidth = 0.6) +
    geom_line(aes(x = mu_values, y = 1-LC_power), color = "#00BA38", linewidth = 0.6) + #w_{1, gamma=3}
    geom_point(aes(x = mu_values, y = 1-LC_power), color = "#00BA38", linewidth = 0.6) +
    geom_hline(yintercept = 0, color = "black", linetype = "dashed", linewidth = 0.2) +
    labs(
      x = "", 
      y = "", 
      title = bquote("K" == .(data$k_values) ~ "," ~ I^2 == .(round(data$tau_squared_values / (data$tau_squared_values + 2 / 50), 2)))
    ) +
    ylim(0, 1) +
    theme_minimal() +
    theme(
      legend.position = "none",
      axis.text = element_text(size = 7),
      axis.title = element_text(size = 7),
      plot.title = element_text(size = 8)
    )
}

# Create a separate plot for the legend
legend_plot_power <- ggplot() +
  geom_line(aes(x = 0, y = 0, color = "pink")) +
  geom_line(aes(x = 0, y = 0, color = "gray")) +
  geom_line(aes(x = 0, y = 0, color = "#619CFF")) +
  geom_line(aes(x = 0, y = 0, color = "#00BA38")) +
  geom_line(aes(x = 0, y = 0, color = "red")) +
  geom_line(aes(x = 0, y = 0, color = "orange")) +
  geom_line(aes(x = 0, y = 0, color = "purple")) +
  
  scale_color_manual(
    values = c(
      "pink", 
      "gray", 
       "#619CFF", 
       "#00BA38",
       "red", 
       "orange", 
      "purple"
    ),
    labels = c(
      expression(Naive),
      expression(w[DGM]),
      expression(w[A]),
      expression(w[B] ~ gamma == 3),
      expression(w[C] ~ beta == 3),
      expression(w[D] ~ gamma == 7 ~ "," ~ beta == 1.5),
      expression(w[D] ~ gamma == 1.5 ~ "," ~ beta == 7)
    )
  ) +
  
   
  theme_void() +
  theme(
    legend.text = element_text(size = 8),
    legend.key.size = unit(3, "mm"),
    axis.title.x = element_blank(),
    axis.title.y = element_blank()
  ) +
  guides(color = guide_legend(title = NULL, label.hjust = 0.5))

parDATA_05 <- dat.new %>% filter(gamma == 0.5)


# Generate plots
plots_power <- parDATA_05 %>%
  group_by(tau_squared_values, k_values) %>%
  do(plot = wrap_plot_power(.)) %>%
  pull(plot)

# Arrange the plots and legend
final_plot <- grid.arrange(
  arrangeGrob(grobs = plots_power, nrow = 5, ncol = 3),
  legend_plot_power,
  nrow = 1,
  widths = c(4.8, 0.7),
  left = grid::textGrob("Power", rot=90, gp = grid::gpar(fontsize = 10)), 
             bottom = grid::textGrob(expression(mu), gp = grid::gpar(fontsize = 12)))




invisible(final_plot)

@
%\hline
\label{Pow2}
\end{figure}


%%%%%%%%% Empirical SE %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%


\begin{figure}[!hbt]
\centering
\caption{Empircal SE in the estimation of the treatment effect for ORB simulated with $\gamma=1.5$}
%\hline
<<echo=FALSE, results='asis', fig.height=12, fig.width=9, message=FALSE, warning=FALSE>>=

#Plots
library(ggplot2)
library(dplyr)
library(gridExtra)

dat.new <- readRDS("../Simulation/AdjustResults3200k_15.rds")

##################### Bias #####################################################

#################### Bias setting 1.5 ##########################################


library(ggplot2)
library(dplyr)
library(gridExtra)

legend_plot_results <- ggplot() +
  geom_line(aes(x = 0, y = 0, color = "pink"))+
  geom_line(aes(x = 0, y = 0, color = "gray"))+
  geom_line(aes(x = 0, y = 0, color = "#619CFF")) +
  geom_line(aes(x = 0, y = 0, color = "#00BA38")) +
  geom_line(aes(x = 0, y = 0, color = "red")) +
  geom_line(aes(x = 0, y = 0, color = "orange")) +
  geom_line(aes(x = 0, y = 0, color = "purple")) +
  
  scale_color_manual(
    values = c(
      "pink",
      "gray",
      "#619CFF", 
      "#00BA38", 
       "red", 
       "orange",
       "purple"
    ),
    labels = c(
      "Naive",
      expression(w[DGM]),
      expression(w[A]),
      expression(w[B](gamma == 3)),
      expression(w[C](beta == 3)),
      expression(w[D](gamma == 7 ~ "," ~ beta == 1.5)),
      expression(w[D](gamma == 1.5 ~ "," ~ beta == 7))
    )
  ) +
  
   
  theme_void() +
  theme(
    legend.text = element_text(size = 8),
    legend.key.size = unit(3, "mm"),
    axis.title.x = element_blank(),
    axis.title.y = element_blank()
  ) +
  guides(color = guide_legend(title = NULL, label.hjust = 0.5))



wrap_plot_emp_se <- function(data) {
  ggplot(data) +
    geom_line(aes(x = mu_values, y = Unadj_emp_se), color = "pink", linewidth = 0.6) + #Naive
    geom_point(aes(x = mu_values, y = Unadj_emp_se), color = "pink", linewidth = 0.6) + #Naive
    
    geom_line(aes(x = mu_values, y = DGM_emp_se), color = "gray", linewidth = 0.6) + #DGM
    geom_point(aes(x = mu_values, y = DGM_emp_se), color = "gray", linewidth = 0.6) + #DGM
    
    geom_line(aes(x = mu_values, y = CL_emp_se), color = "red", linewidth = 0.6) + #w_{C, beta=3}
    geom_point(aes(x = mu_values, y = CL_emp_se), color = "red", linewidth = 0.6) + #w_{C, beta=3}
    
    geom_line(aes(x = mu_values, y = CC1_emp_se), color = "orange", linewidth = 0.6) + #w_{D, gamma=7, beta=1.5}
    geom_point(aes(x = mu_values, y = CC1_emp_se), color = "orange", linewidth = 0.6) + #w_{D, gamma=7, beta=1.5}
    
    geom_line(aes(x = mu_values, y = CC2_emp_se), color = "purple", linewidth = 0.6) + #w_{D, gamma=1.5, beta=7}
    geom_point(aes(x = mu_values, y = CC2_emp_se), color = "purple", linewidth = 0.6) + #w_{D, gamma=1.5, beta=7}
    
    geom_line(aes(x = mu_values, y = LL_emp_se), color = "#619CFF", linewidth = 0.6) + #w_{A}
    geom_point(aes(x = mu_values, y = LL_emp_se), color = "#619CFF", linewidth = 0.6) + #w_{A}
    
    geom_line(aes(x = mu_values, y = LC_emp_se), color = "#00BA38", linewidth = 0.6) + #w_{B, gamma=3}
    geom_point(aes(x = mu_values, y = LC_emp_se), color = "#00BA38", linewidth = 0.6) + #w_{B, gamma=3}
    
    geom_hline(yintercept = 0, color = "black", linetype = "dashed", linewidth = 0.4) +
    labs(
      x = "", 
      y = "", 
      title = bquote("K" == .(data$k_values) ~ "," ~ I^2 == .(round(data$tau_squared_values / (data$tau_squared_values + 2 / 50), 2)))
    ) +
    ylim(0, 0.3) +
    theme_minimal() +
    theme(
      legend.position = "none",
      axis.text = element_text(size = 7),
      axis.title = element_text(size = 7),
      plot.title = element_text(size = 8)
    )
}


# Filter the data for gamma = 1.5
parDATA_15 <- dat.new %>% filter(gamma == 1.5)

# Generate plots
plots_emp_se <- parDATA_15 %>%
  group_by(tau_squared_values, k_values) %>%
  do(plot = wrap_plot_emp_se(.)) %>%
  pull(plot)

# Arrange the plots and legend
final_plot <- grid.arrange(
  arrangeGrob(grobs = plots_emp_se, nrow = 5, ncol = 3),
  legend_plot_results,
  nrow = 1,
  widths = c(4.8, 0.7),
  left = grid::textGrob("Empirical SE", rot = 90, gp = grid::gpar(fontsize = 10)),
  bottom = grid::textGrob(expression(mu), gp = grid::gpar(fontsize = 12))
)

invisible(final_plot)




@
%\hline
\label{SE1}
\end{figure}


\begin{figure}[!hbt]
\centering
\caption{Empirical SE in the estimation of the treatment effect for ORB simulated with $\gamma=0.5$}
%\hline
<<echo=FALSE, results='asis', fig.height=12, fig.width=9, message=FALSE, warning=FALSE>>=

#Plots
library(ggplot2)
library(dplyr)
library(gridExtra)

dat.new <- readRDS("../Simulation/AdjustResults3200k_05.rds")

#dattt <- readRDS("/Users/alessandrasaracini/Downloads/AdjustResults.rds")

##################### emp_se #####################################################


# Create a separate plot for the legend
legend_plot_emp_se <- ggplot() +
  geom_line(aes(x = 0, y = 0, color =  "Naive")) +
  geom_line(aes(x = 0, y = 0, color =  "Adj Constant-Constant")) +
  geom_line(aes(x = 0, y = 0, color =  "Adj Constant-Continuous")) +
  geom_line(aes(x = 0, y = 0, color = "Adj Continuous-Constant"))+
  geom_line(aes(x = 0, y = 0, color = "Adj Continuous-Continuous I"))+
  geom_line(aes(x = 0, y = 0, color = "Adj Continuous-Continuous II"))+
  geom_line(aes(x = 0, y = 0, color = "Adj DGM"))+
  
  theme_void()+
  theme(
    legend.text = element_text(size = 4),
    legend.key.size = unit(2, "mm"), # Adjust the size of plot title
    axis.title.x = element_blank(),             # Remove x-axis label
    axis.title.y = element_blank()
  )+
  guides(color = guide_legend(title = NULL))


#################### emp_se setting 0.5 ##########################################

library(ggplot2)
library(dplyr)
library(gridExtra)

wrap_plot_emp_se <- function(data) {
  ggplot(data) +
    geom_line(aes(x = mu_values, y = Unadj_emp_se), color = "pink", linewidth = 0.6) + #Naive
    geom_point(aes(x = mu_values, y = Unadj_emp_se), color = "pink", linewidth = 0.6) + #Naive
    
    geom_line(aes(x = mu_values, y = DGM_emp_se), color = "gray", linewidth = 0.6) + #DGM
    geom_point(aes(x = mu_values, y = DGM_emp_se), color = "gray", linewidth = 0.6) + #DGM
    
    
    geom_line(aes(x = mu_values, y = LL_emp_se), color = "#619CFF", linewidth = 0.6) + #w_{0}
    geom_point(aes(x = mu_values, y = LL_emp_se), color = "#619CFF", linewidth = 0.6) + #w_{0}
    #geom_line(aes(x = mu_values, y = LC_emp_se), color = "#00BA38", linewidth = 0.6) + #w_{1, gamma=3}
    geom_line(aes(x = mu_values, y = CL_emp_se), color = "red", linewidth = 0.6) + #w_{2, beta=3}
    geom_point(aes(x = mu_values, y = CL_emp_se), color = "red", linewidth = 0.6) + #w_{2, beta=3}
    
    geom_line(aes(x = mu_values, y = CC1_emp_se), color = "orange", linewidth = 0.6) + #w_{3, gamma=7, beta=1.5}
    geom_point(aes(x = mu_values, y = CC1_emp_se), color = "orange", linewidth = 0.6) +
    geom_line(aes(x = mu_values, y = CC2_emp_se), color = "purple", linewidth = 0.6) + #w_{3, gamma=1.5, beta=7}
    geom_point(aes(x = mu_values, y = CC2_emp_se), color = "purple", linewidth = 0.6) +
    geom_line(aes(x = mu_values, y = LC_emp_se), color = "#00BA38", linewidth = 0.6) + #w_{1, gamma=3}
    geom_point(aes(x = mu_values, y = LC_emp_se), color = "#00BA38", linewidth = 0.6) +
    geom_hline(yintercept = 0, color = "black", linetype = "dashed", linewidth = 0.2) +
    labs(
      x = "", 
      y = "", 
      title = bquote("K" == .(data$k_values) ~ "," ~ I^2 == .(round(data$tau_squared_values / (data$tau_squared_values + 2 / 50), 2)))
    ) +
    ylim(0, 0.3) +
    theme_minimal() +
    theme(
      legend.position = "none",
      axis.text = element_text(size = 7),
      axis.title = element_text(size = 7),
      plot.title = element_text(size = 8)
    )
}

# Create a separate plot for the legend
legend_plot_emp_se <- ggplot() +
  geom_line(aes(x = 0, y = 0, color = "pink")) +
  geom_line(aes(x = 0, y = 0, color = "gray")) +
  geom_line(aes(x = 0, y = 0, color = "#619CFF")) +
  geom_line(aes(x = 0, y = 0, color = "#00BA38")) +
  geom_line(aes(x = 0, y = 0, color = "red")) +
  geom_line(aes(x = 0, y = 0, color = "orange")) +
  geom_line(aes(x = 0, y = 0, color = "purple")) +
  
  scale_color_manual(
    values = c(
      "pink", 
      "gray", 
       "#619CFF", 
       "#00BA38",
       "red", 
       "orange", 
      "purple"
    ),
    labels = c(
      expression(Naive),
      expression(w[DGM]),
      expression(w[A]),
      expression(w[B] ~ gamma == 3),
      expression(w[C] ~ beta == 3),
      expression(w[D] ~ gamma == 7 ~ "," ~ beta == 1.5),
      expression(w[D] ~ gamma == 1.5 ~ "," ~ beta == 7)
    )
  ) +
  
   
  theme_void() +
  theme(
    legend.text = element_text(size = 8),
    legend.key.size = unit(3, "mm"),
    axis.title.x = element_blank(),
    axis.title.y = element_blank()
  ) +
  guides(color = guide_legend(title = NULL, label.hjust = 0.5))

parDATA_05 <- dat.new %>% filter(gamma == 0.5)


# Generate plots
plots_emp_se <- parDATA_05 %>%
  group_by(tau_squared_values, k_values) %>%
  do(plot = wrap_plot_emp_se(.)) %>%
  pull(plot)

# Arrange the plots and legend
final_plot <- grid.arrange(
  arrangeGrob(grobs = plots_emp_se, nrow = 5, ncol = 3),
  legend_plot_emp_se,
  nrow = 1,
  widths = c(4.8, 0.7),
  left = grid::textGrob("Empirical SE", rot=90, gp = grid::gpar(fontsize = 10)), 
             bottom = grid::textGrob(expression(mu), gp = grid::gpar(fontsize = 12)))




invisible(final_plot)

@
%\hline
\label{SE2}
\end{figure}

%%%%%%%%%%%% Bias tau squared %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%


%\newpage

%\nocite{*} % Include all entries from the bibliography file
%\bibliographystyle{mywiley} % Choose natbib-compatible bibliography style
%\bibliography{biblio} % Replace 'biblio' with your actual BibTeX file name

%\newpage



\end{document}
